name: CI / Build & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:   # manual trigger

permissions:
  contents: read
  packages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to GHCR (use GHCR_PAT secret; see step 3)
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # Build and push image to GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/team-tasks-aws:latest
            ghcr.io/${{ github.repository_owner }}/team-tasks-aws:${{ github.sha }}

      # Deploy to the remote VM via SSH
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}       # private key contents
          port: ${{ secrets.VM_SSH_PORT }}     # default 22
          timeout: 30s
          script: |
            set -euo pipefail
            IMAGE=ghcr.io/${{ github.repository_owner }}/team-tasks-aws:latest

            # ensure docker present (assumes docker already installed; remove if not necessary)
            docker --version || (sudo apt-get update && sudo apt-get install -y docker.io && sudo systemctl enable --now docker)

            # pull latest image
            docker pull $IMAGE

            # optional: write env file from secrets (uncomment if you want to update env on deploy)
            # printf "%s\n" "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" > /home/${{ secrets.VM_USER }}/app.env
            # sudo chown ${{ secrets.VM_USER }}: /home/${{ secrets.VM_USER }}/app.env
            # sudo chmod 600 /home/${{ secrets.VM_USER }}/app.env

            # Minimal downtime restart:
            # 1) try graceful stop of old container
            docker ps -q --filter "name=myapp" | grep -q . && docker stop myapp || true
            docker rm myapp || true

            # 2) run new container (adjust ports & env as needed)
            docker run -d --name myapp --restart unless-stopped \
              -p 80:3000 \
              --env-file /home/${{ secrets.VM_USER }}/app.env \
              $IMAGE

            # verify
            docker ps -a
